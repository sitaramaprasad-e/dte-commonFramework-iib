def remote = [:]
remote.name = 'cvs.ad.prolifics.com'
remote.host = 'cvs.ad.prolifics.com'
remote.allowAnyHosts = true
withCredentials([usernamePassword(credentialsId: 'iibadmuserpass', passwordVariable: 'password', usernameVariable: 'userName')])
        {
			remote.user = userName
			remote.password = password
		}
pipeline {
   	agent any
	stages{
		stage('Checkout Code'){
           	 steps {
              	  checkout([$class: 'GitSCM', branches: [[name: '*/feature']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'load']], submoduleCfg: [], userRemoteConfigs: [[url: 'git@github.com:sitaramaprasad-e/dte-commonFramework-iib.git']]])
          	  }
          
       } 
       stage('MQ'){
       		steps{
     			//sshagent(['iibadm']) {
			   sh 'ssh -v -i id_rsa jenkins@10.0.10.160'
			   sh 'ssh -o StrictHostKeyChecking=no jenkins@10.0.10.160 "cd /home/jenkins; runmqsc PBCTEST < deploymq.sh"'
    			//}
		}
       }
     
		stage('Remote SSH to MQ Server') {
		steps{
			sshCommand remote: remote, command: 'ls -ltr'
			sshCommand remote: remote, command: 'for i in {1..5}; do echo -n \"Loop \$i \"; date ; sleep 1; done'
		   	sshPut remote: remote, from: './MQ/deploymq.sh', into: '.'
			sshScript remote: remote, script: "./MQ/deploymq.sh"
			sshRemove remote: remote, path: "deploymq.sh"

		}
            }
	      }
	      
}
