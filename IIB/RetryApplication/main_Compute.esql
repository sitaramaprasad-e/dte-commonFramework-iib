/***********************************************************************************************************************************
* COPYRIGHT. PROLIFICS CORPORATION LIMITED. ALL RIGHTS RESERVED. NO PART OF THIS SOURCE CODE MAY BE
* REPRODUCED, STORED IN A RETRIEVAL SYSTEM, OR TRANSMITTED, IN ANY FORM OR BY ANY MEANS,
* ELECTRONIC, MECHANICAL, PHOTOCOPYING, RECORDING OR OTHERWISE, WITHOUT THE PRIOR WRITTEN PERMISSION
* OF PROLIFICS CORPORATION LIMITED
************************************************************************************************************************************
*************************************************************************************************************************************
* In this module , we are recieving XMLNSC message for which we are doing Retry Mechanism for a time period of 30 minutes. 
* after the retry got exhausted the message will be logged by logging framework.
************************************************************************************************************************************
*/

DECLARE conditionalLogging EXTERNAL CHARACTER 'N';
CREATE COMPUTE MODULE RetryMechanism_Compute1
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE refenv REFERENCE TO Environment;
		SET refenv.msgId = InputRoot.MQMD.MsgId;
		
		-- conditional logging on the basis of UDP.
        IF conditionalLogging = 'N' THEN
        -- when there is no logging required , only message is sending to the LoggingQueue
        	SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
        	PROPAGATE TO TERMINAL 'out2'; 
        	RETURN FALSE; 
        ELSE
        -- Declared Prameter for Retry Mechanism
	        DECLARE SleepTime		INTEGER;
			DECLARE TimeDiff 		INTEGER;
	        DECLARE RetryTime 		INTEGER     COALESCE(InputRoot.MQRFH2.usr.RetryTime, 0);
--	        DECLARE In_DtTimeStamp  TIMESTAMP; 
	        DECLARE  In_DtTimeStamp   GMTTIMESTAMP;	
	        DECLARE  Cu_DtTimeStamp   GMTTIMESTAMP;
			DECLARE  Cu_TimeStamp 	TIME;
			--According to the GMT TimeStamp 
			SET In_DtTimeStamp = CAST(InputRoot.MQRFH2.usr.Timestamp AS GMTTIMESTAMP FORMAT 'yyyy-MM-dd''T''HH:mm:ss''Z''' );
			
			DECLARE returnValue BOOLEAN;
			SET SleepTime = CAST(InputRoot.MQRFH2.usr.Sleep AS INTEGER);
			SET returnValue = SLEEP(SleepTime);
            SET Cu_DtTimeStamp = CURRENT_GMTTIMESTAMP;		
			SET TimeDiff 	   = (Cu_DtTimeStamp  - In_DtTimeStamp) SECOND ; 
	
			-- routing the message on the basis of time difference.
			IF TimeDiff > RetryTime THEN    
					SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = InputRoot.MQRFH2.usr.LoggingQueue;	
					SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
			   		PROPAGATE TO TERMINAL 'out1';
			    	RETURN FALSE;
			    
			ELSE
	  			    
			        SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = InputRoot.MQRFH2.usr.OutputDestinationQueue;
					SET OutputRoot = InputRoot;
			    	RETURN TRUE;
			    
			END IF;
		 END IF;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
